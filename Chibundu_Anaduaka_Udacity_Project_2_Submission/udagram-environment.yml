AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Trinity Udagram Application Cloud Infrastructre Environment.
  This template deploys the ... hosting the Udagram Application.

Parameters:
  EnvironmentName:
    Description: Environment name prefix that will be tagged to resources
    Type: String

  MyHomePC:
    Description: Home PC IP to connect to Bastion Host server
    Type: String

  AmiId:
    Description: The Amazon Machine Image Id to use for the app servers
    Type: AWS::EC2::Image::Id
    Default: ami-0a858bf97b16a537c

  MachineInstanceType:
    Description: The machine instance type to use for the app servers. Specify from allowed values.
    Type: String
    Default: c5a.large
    AllowedValues:
      - t2.micro
      - t3.medium
      - c5a.large

  EbsVolumeSize:
    Description: The EBS volume size to use
    Type: Number
    Default: 10

  AutoScalingDesiredSize:
    Description: The desired number of servers in app server auto scaling group
    Type: String
    Default: "4"

  AutoScalingMinSize:
    Description: The minimum number of servers in app server auto scaling group
    Type: String
    Default: "4"

  AutoScalingMaxSize:
    Description: The maximum number of servers in app server auto scaling group
    Type: String
    Default: "4"

Resources:
  LBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Controls http connection to and from load balancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LBSG

  LBSGOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: AppServerSG
    Properties:
      GroupId: !Ref LBSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !GetAtt AppServerSG.GroupId

  AppServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Controls http and ssh connections to and from the app servers
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AppServerSG

  AppServerSGInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppServerSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt LBSG.GroupId

  AppServerSGInboundRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppServerSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt BastionServerSG.GroupId

  BastionServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Controls ssh connection to and from Bastion host server
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyHomePC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionServerSG

  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Ref: BastionServerSG
          SubnetId:
            Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN1

      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionServer

  AppServerRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - UdagramS3ReadOnlyAppServer

  AppServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      IamInstanceProfile: !Ref AppServerRoleProfile
      ImageId: !Ref AmiId
      SecurityGroups:
        - Ref: AppServerSG
      InstanceType: !Ref MachineInstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EbsVolumeSize

  AppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-AppServerGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-SNs"
      LaunchConfigurationName:
        Ref: AppServerLaunchConfig
      DesiredCapacity: !Ref AutoScalingDesiredSize
      MinSize: !Ref AutoScalingMinSize
      MaxSize: !Ref AutoScalingMaxSize
      TargetGroupARNs:
        - Ref: AppServerTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 15
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${EnvironmentName}-AppServer

  AppServerLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "UdagramApp"
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN2"
      SecurityGroups:
        - Ref: LBSG
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AppServerLB

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: AppServerLB
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AppServerTargetGroup
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref "Listener"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "AppServerTargetGroup"
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: [/]

  AppServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AppServerTargetGroup

Outputs:
  AppServerLB:
    Description: DNSName of AppServer Load Balancer
    Value: !Join ["/", ["http:/", !GetAtt AppServerLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-DNSName
